use iced::widget::{column, text};
use iced::{Alignment, Element, Sandbox, Settings};

#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Debug)]
enum NodeVal {
    Text(String),
}

#[derive(Clone, Copy, Hash, PartialEq, Eq, PartialOrd, Ord)]
struct Pos {
    x: u32,
    y: u32,
}

impl Pos {
    fn new(x: u32, y: u32) -> Self {
        Pos { x, y }
    }
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone)]
struct Node {
    val: NodeVal,
    pos: Pos,
}

impl Node {
    fn new(val: NodeVal) -> Self {
        Node {
            val,
            pos: Pos::new(0, 0),
        }
    }
}

struct Edge<'a> {
    from: &'a Node,
    val: &'a Node,
    to: &'a Node,
}

struct Graph<'a> {
    nodes: Vec<Node>,
    edges: Vec<Edge<'a>>,
}

impl Graph<'a> {
    fn add_node(&mut self, node: Node) {
	self.nodes.push(node);
    }
}

pub fn main() -> iced::Result {

    Aweb::run(Settings::default())
}

#[derive(Debug, Clone, Copy)]
enum Message {

}

struct Aweb {}

impl Sandbox for Aweb {
    type Message = Message;
    fn new() -> Self {
        Self {}
    }

    fn title(&self) -> String {
        String::from("Aweb")
    }

    fn update(&mut self, message: Message) {
        match message {
	}
    }

    fn view(&self) -> Element<Message> {
        column![
	    text("Hello world!").size(50),
	].padding(20)
            .align_items(Alignment::Center)
            .into()
    }
}
